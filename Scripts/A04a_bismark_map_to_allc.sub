
#!/bin/bash
#$ -cwd
#$ -o sublogs/A04a_bismark.$JOB_ID.$TASK_ID
#$ -j y
#$ -l h_rt=48:00:00,h_data=16G,highp
#$ -pe shared 4
#$ -N A04a_bismark
#$ -t 1-256
#$ -hold_jid_ad A03a_trim



echo "Job $JOB_ID.$SGE_TASK_ID started on:   " `hostname -s`
echo "Job $JOB_ID.$SGE_TASK_ID started on:   " `date `
echo " "




# environment init ------------------—------------------—-----------------------

. /u/local/Modules/default/init/modules.sh # <--
module load anaconda3 # <--
conda activate snmCTseq # <--

export $(cat snmCT_parameters.env | grep -v '^#' | xargs) # <--

skip_complete=true # <-- for help with incomplete jobs
overwrite_partial=true # <-- for help with incomplete jobs

# note: estimated time is ~30 min/well so h_rt=48:00:00 may be excessive
# alternatives are to use 24hr & resubmit if incomplete or change wells/batch in A01c



# extract target filepaths ------------------—------------------—---------------

# helper functions
query_metadat () {
  awk -F',' -v targetcol="$1" \
      'NR==1 {
                for (i=1;i<=NF;i++) {
                    if ($i==targetcol) {assayout=i; break} }
                print $assayout
              }
      NR>1 {
                print $assayout
            }' ${metadat_well}
}

# extract target wells, print values for log
batchnum=($(query_metadat "batchnum"))
nwells=${#batchnum[@]}

target_well_rows=()
for ((row=1; row<=nwells; row++))
do
    if [[ "${batchnum[$row]}" == "${SGE_TASK_ID}" ]]
    then
        target_well_rows+=($row)
    fi
done

# filepaths associated with target rows in well-level metadata -----------------
# (generally not customizeable because output names set by bismark)

wellprefix=($(query_metadat "wellprefix"))
dir_well=($(query_metadat "A04a_dir_bismark"))

# .fastqs for input to PE mapping (properly paired read pairs)
fastq_r1p=($(query_metadat "A03a_fqgz_paired_R1"))
fastq_r2p=($(query_metadat "A03a_fqgz_paired_R2"))

# .fastqs for input to SE mapping, including singletons from trimming & unaligned in PE-mapping
fastq_r1singletrim=($(query_metadat "A03a_fqgz_singletrim_R1"))
fastq_r2singletrim=($(query_metadat "A03a_fqgz_singletrim_R2"))
fastq_r1unmap=($(query_metadat "A04a_fqgz_unmap_R1"))
fastq_r2unmap=($(query_metadat "A04a_fqgz_unmap_R2"))

# (I) bismark mapping .bam output
bam_pe=($(query_metadat "A04a_bam_bismark_PE"))
bam_se1trim=($(query_metadat "A04a_bam_bismark_SE1trim"))
bam_se2trim=($(query_metadat "A04a_bam_bismark_SE2trim"))
bam_se1unmap=($(query_metadat "A04a_bam_bismark_SE1unmap"))
bam_se2unmap=($(query_metadat "A04a_bam_bismark_SE2unmap"))



# (II) deduplication, (III) read-level filtering, (IV) allc generation ---------
# these names customizeable and located at mapping_bismark/$wellprefix[@]/namegivenbelow
# (should shift to grabbing from the metadata file for consistency)

bam_dedupe_pe=PE_dedupe.bam
bam_merge_se=SE_merge.bam
bam_mergesort_se=SE_mergesort.bam
bam_dedupe_se=SE_dedupe.bam

log_picard_pe=picard_PE.log
log_picard_se=picard_SE.log

sam_dedupeq10_pe=PE_dedupeq10.sam
sam_dedupeq10_se=SE_dedupeq10.sam

sam_pe_filtered=PE_filt.sam
sam_se_filtered=SE_filt.sam

bam_pe_filtered=PE_final.bam
bam_se_filtered=SE_final.bam

allc_PE=PE_allc.tsv.gz
allc_SE=SE_allc.tsv.gz

allc_final=allc.tsv.gz
allctbi_final=allc.tsv.gz.tbi
allc_check=allc_check.txt



# print target files -----------------------------------------------------------

echo "batch number: ${SGE_TASK_ID}"
echo "processing the following rows in well metadata file (${metadat_well}):"
for row in ${target_well_rows[@]}
    do
        echo -e "$row\t${wellprefix[$row]}"
    done
echo -e "\n\n"


# for each well in batch, apply mC map & quant
# (could add check here to skip rows where no trimming output,
# but since done by well doesn't cause catastrophic problems)
for row in ${target_well_rows[@]} 
do

    # check for existing mapping output
    # if final outputs exist, skip; else run mapping .bam
    cd ${dir_proj}
    
    if [[ -s mapping_bismark/${wellprefix[$row]}/${allc_final} \
        && -s mapping_bismark/${wellprefix[$row]}/${allctbi_final} \
        && -s mapping_bismark/${wellprefix[$row]}/${allc_check} \
        && "$skip_complete"=="true" ]]
    then
        echo -e "final .allc files for '${wellprefix[$row]}' already exist. skipping this well.'"
    else
    
        echo -e "\n\napplying bismark to '${wellprefix[$row]}'...\n\n"

        # remove old directory if one exists to deal with incomplete files
        # albeit the only major issues are .bai and .tbi indices 
        # (these often are not overwritten by software in the pipeline,
        # resulting in "index is older than file" errors later on)
        if [[ -e mapping_bismark/${wellprefix[$row]} && "${overwrite_partial}" == "true" ]]
        then
            echo -e "\n\nWARNING: folder for '${wellprefix[$row]}' exists, but not its final allc files."
            echo "because overwrite_partial=true, deleting the directory and re-mapping."
            rm -rf mapping_bismark/${wellprefix[$row]}
        fi
        
        mkdir ${dir_well[$row]}
        cd ${dir_well[$row]}
        
    # (A) run bismark "two-stage" mapping -------------------------------------
    # in: .fastqs from trimming: four .fastqs,
    #     properly paired ($fastq_r2p, $fastq_r1p) and trimming singletons
    #    ($fastq_r1singletrim, $fastq_r2singletrim)
    # out: - paired-end alignments out ($bam_pe, $bam_pe_unmap1, $bam_pe_unmap2)
    #      - single-end .bam alignments out ($bam_single1, $bam_single2)
    #      - key log files (e.g., mapping rate) 
    # -------------------------------------------------------------------------

       # (Ai.) PE [2 to 10 minutes]
       # assumptions: pairs that map ambiguously in paired-end mode should be discarded
       
       bismark $ref_dir --bowtie2 --pbat \
                -1 ${dir_proj}/${fastq_r1p[$row]} -2 ${dir_proj}/${fastq_r2p[$row]} \
                --maxins 2000 --multicore 3 --un --ambiguous

        # (Aii.) single-end, R1 [1 to 3 minutes]
        bismark $ref_dir --bowtie2 --pbat -se \
                ${dir_proj}/${fastq_r1unmap[$row]}:${dir_proj}/${fastq_r1singletrim[$row]} --multicore 3

        # (Aiii.) single-end, R2 [1 to 3 minutes]
        bismark $ref_dir --bowtie2 -se \
                ${dir_proj}/${fastq_r2unmap[$row]}:${dir_proj}/${fastq_r2singletrim[$row]} --multicore 3

        # cleanup
        rm *ambiguous_reads*
        

    # (B) de-deuplication -----------------------------------------------------
    # in: paired-end .bam (name sorted), four single-end .bam (unsorted, need to sort)
    # out: de-duplicated PE .bam, de-duplicated combined SE .bam
    # -------------------------------------------------------------------------
        
        # (Bi.) PE [<1 min]
        picard MarkDuplicates -I $(basename ${bam_pe[$row]}) \
            --ASSUME_SORT_ORDER "queryname" --OPTICAL_DUPLICATE_PIXEL_DISTANCE 2500 \
            --ADD_PG_TAG_TO_READS false --REMOVE_DUPLICATES \
            -O ${bam_dedupe_pe} -M ${log_picard_pe}

        # (Bii.) SE [1-2 min] 
        samtools merge ${bam_merge_se} \
            $(basename ${bam_se1trim[$row]}) $(basename ${bam_se2trim[$row]}) \
            $(basename ${bam_se1unmap[$row]}) $(basename ${bam_se2unmap[$row]})
            
        samtools sort ${bam_merge_se} > ${bam_mergesort_se}
        
        picard MarkDuplicates -I ${bam_mergesort_se} \
            --OPTICAL_DUPLICATE_PIXEL_DISTANCE 2500 \
            --ADD_PG_TAG_TO_READS false --REMOVE_DUPLICATES \
            -O ${bam_dedupe_se} -M ${log_picard_se}

        # (Biii.) clean-up
        rm ${bam_merge_se} ${bam_mergesort_se}


    # (C) read-level filtering ------------------------------------------------
    # via MAPQ, mCH levels to remove ambig/RNA reads
    # MAPQ >= 10 & .sam conversion --> then perl script to output annotations
    # -------------------------------------------------------------------------

        # (Ci.) PE [1-3 min]
        # this assumes *any* read meeting the filtering criteria is kept;
        # if both R1 & R2 of pair need to pass filtering criteria (AND instead of OR),
        #     needs an added annotations --> wide step like the below
        # sed '$!N;s/\n/ /' ${sam_dedupe_pe_q10}_annotations \
        #     | awk '{print ( ($3 == "DNA") && ($6 == "DNA") )}' \
        #     | awk '{print $0}1' > ${sam_dedupe_pe_q10}_annotations_bothpairs
        # then awk filter off of this 'bothpairs' file

        samtools view -hq 10 ${bam_dedupe_pe} > ${sam_dedupeq10_pe}
        perl ${dir_proj}/Scripts/A04a_classify_mCT_reads_bismark.pl ${sam_dedupeq10_pe}
        awk 'NR == FNR { if ($0=="" || $3=="DNA") line[NR]; next } (FNR in line)' \
            ${sam_dedupeq10_pe}_annotations ${sam_dedupeq10_pe} |
            samtools view -b - | samtools sort - > ${bam_pe_filtered}
        samtools index ${bam_pe_filtered}
        
        # (Cii.) SE [1-3 min]
        samtools view -hq 10 ${bam_dedupe_se} > ${sam_dedupeq10_se}
        perl ${dir_proj}/Scripts/A04a_classify_mCT_reads_bismark.pl ${sam_dedupeq10_se}
        awk 'NR == FNR { if ($0=="" || $3=="DNA") line[NR]; next } (FNR in line)' \
            ${sam_dedupeq10_se}_annotations ${sam_dedupeq10_se} |
            samtools view -b - | samtools sort - > ${bam_se_filtered}
        samtools index ${bam_se_filtered}

        # (Ciii.) optional clean-up (comment out as desired)
        rm ${bam_dedupe_pe} ${sam_dedupeq10_pe}
        rm ${bam_dedupe_se} ${sam_dedupeq10_se}
        # rm ${sam_dedupeq10_pe}_annotations ${sam_dedupeq10_se}_annotations
        

    # (D) generate .allc tsv --------------------------------------------------
    # in: SE and PE .bam files
    # out: tab-separated file with chr, pos, seq context, methyl reads, total cov
    #      generated separatedly for PE and SE, then joined
    #      (for historical paired-end dev, but might be faster to join .bam first)
    # -------------------------------------------------------------------------

        # (Di.) make separate PE, SE allc files [~3-10 minutes] 
        allcools bam-to-allc -bam ${bam_pe_filtered} --cpu 1 \
            --reference_fasta $ref_fasta --output_path ${allc_PE} --convert_bam_strandness
        allcools bam-to-allc -bam ${bam_se_filtered} --cpu 1 \
            --reference_fasta $ref_fasta --output_path ${allc_SE} --convert_bam_strandness

        # (Dii.) merge the .allc files into one [~5 min]
        # before .allc generation --> .allc
        allcools merge-allc --allc_paths ${allc_PE} ${allc_SE} --cpu 1 \
                --output_path ${allc_final} \
                --chrom_size_path ${ref_chromsizes}
                
        # (Diii.) rough check if allc finished, can check for warnings via grep 
        # main pitfall: bam_to_allc & merge-allc can silently fail from mem/threading issues,
        # resulting in invalid last line or not all chromosomes being displayed 
        
        du -h *allc* > ${allc_check} # PE + SE should approx add up to final
        gunzip -c ${allc_final} | awk -F '\t' '{print $1}' | uniq -c >> ${allc_check}
        
        # usual file size >20Mb
        if [[ $(( $(stat -c%s ${bam_pe_filtered}) + $(stat -c%s ${bam_se_filtered}) < 3000000 )) == 1 ]]
        then
            echo -e "\n\nWARNING: .bam file sizes unusually small (<3Mb)." 
        fi >> ${allc_check}
        
        # comment out or change to last chr depending on ref chromosome used
        if [[ $(tail ${allc_check} | grep 'KI' | wc -l) == 0 ]]
        then
            echo "WARNING: KI scaffolds missing; merge .all.gz terminated early? (or low coverage)"
        fi >> ${allc_check}
        
        # with mem issue the .tsv may fail mid-writing, so have incorrect # cols
        if [[ $( gunzip -c ${allc_final} | awk '{print NF}' | uniq | wc -l) != 1 ]]
            then
            echo "WARNING: different numbers of columns per row detected?"
            fi >> ${allc_check}
            
        # (Vc.) optional cleanup
        # could also delete pre-filtering alignment files if not using
        rm ${allc_PE} ${allc_PE}.tbi ${allc_SE} ${allc_SE}.tbi
    

fi
done



echo -e "\n\n'A04a_bismark' completed.\n\n"



echo "Job $JOB_ID.$SGE_TASK_ID ended on:   " `hostname -s`
echo "Job $JOB_ID.$SGE_TASK_ID ended on:   " `date `
echo " "
