#!/bin/bash
#$ -cwd
#$ -o sublogs/A05a_star.$JOB_ID.$TASK_ID
#$ -j y
#$ -l h_rt=12:00:00,h_data=8G,exclusive
#$ -pe shared 8
#$ -N A05a_star
#$ -t 1-256
#$ -hold_jid_ad A03a_trim



echo "Job $JOB_ID.$SGE_TASK_ID started on:   " `hostname -s`
echo "Job $JOB_ID.$SGE_TASK_ID started on:   " `date `
echo " "





# environment init -------------------------------------------------------------

. /u/local/Modules/default/init/modules.sh # <--
module load anaconda3 # <--
conda activate snmCTseq # <--

export $(cat snmCT_parameters.env | grep -v '^#' | xargs) # <--

skip_complete=true # <-- for help with incomplete jobs
overwrite_partial=true # <-- for help with incomplete jobs

# (most of the) STAR settings
# originally adapted from ENCODE guidelines
star_params="--runThreadN 8 \
--genomeDir ${ref_starfolder} --genomeLoad LoadAndKeep \
–alignEndsType EndToEnd --outSAMtype BAM Unsorted \
--outSAMattributes NH HI AS NM MD --outSAMstrandField intronMotif \
--sjdbOverhang 149 --outFilterType BySJout \
--outFilterMultimapNmax 20 --alignSJoverhangMin 8 \
--alignSJDBoverhangMin 1 –outFilterMismatchNmax 999 \
--outFilterMismatchNoverLmax 0.04 --alignIntronMin 20 \
--alignIntronMax 1000000 --alignMatesGapMax 1000000 --readFilesCommand zcat "



# extract target filepaths -----------------------------------------------------

# helper functions
query_metadat () {
    awk -F',' -v targetcol="$1" \
    'NR==1 {
                for (i=1;i<=NF;i++) {
                if ($i==targetcol) {assayout=i; break} }
                print $assayout
              }
    NR>1 {
                print $assayout
            }' ${metadat_well}
    }

# extract target wells, print values for log
batchnum=($(query_metadat "batchnum"))
nwells=${#batchnum[@]}

target_well_rows=()
for ((row=1; row<=nwells; row++))
do
    if [[ "${batchnum[$row]}" == "${SGE_TASK_ID}" ]]
    then
        target_well_rows+=($row)
    fi
done
 

 
# filepaths associated with target rows in well-level metadata -----------------

wellprefix=($(query_metadat "wellprefix"))
dir_well=($(query_metadat "A05a_dir_star"))

# .fastqs for input to PE mapping (properly paired read pairs)
fastq_r1p=($(query_metadat "A03a_fqgz_paired_R1"))
fastq_r2p=($(query_metadat "A03a_fqgz_paired_R2"))

# .fastqs for input to SE mapping, including singletons from trimming & unaligned in PE-mapping
fastq_r1singletrim=($(query_metadat "A03a_fqgz_singletrim_R1"))
fastq_r2singletrim=($(query_metadat "A03a_fqgz_singletrim_R2"))



# temporary/intermediate mapping files -----------------------------------------
# (expected output generated by STAR, given outname prefixes PE., SE1., SE2.)

fastq_pe_unmap1=PE.Unmapped.out.mate1
fastq_pe_unmap2=PE.Unmapped.out.mate2

bam_pe=PE.Aligned.out.bam
bam_se1=SE1.Aligned.out.bam
bam_se2=SE2.Aligned.out.bam



# run STAR mapping -------------------------------------------------------------

cd ${dir_proj}/mapping_star

# load genome index [5~10 min]
# creates some apparent .log, .sam out despite just loading genome
# so putting in mapping_star to keep these files in one place

STAR --runThreadN 8 --genomeDir ${ref_starfolder} --genomeLoad LoadAndExit



# loop through each well to map ------------------------------------------------

for row in ${target_well_rows[@]} 
    do

    # check directory/prior mapping --------------------------------------------
    cd ${dir_proj}
    
    # check for existing mapping output
    # if final outputs exist, skip; else run mapping .bam

    if [[ -s ${dir_well[$row]}/${bam_pe} \
        && -s ${dir_well[$row]}/${bam_se1} \
        && -s ${dir_well[$row]}/${bam_se2} \
        && "${skip_complete}"=="true" ]]
    then
        echo -e "final aligned .bams for '${wellprefix[$row]}' already exist. skipping this well.'"
    else
        echo -e "\n\napplying STAR to '${wellprefix[$row]}'...\n\n"

      # remove old directory if one exists to deal with incomplete files
      # albeit the only major issues are .bai and .tbi indices 
      # (these often are not overwritten by software in the pipeline,
      # resulting in "index is older than file" errors later on)
      if [[ -e ${dir_well[$row]} && "${overwrite_partial}" == "true" ]]
      then
          echo -e "\n\nWARNING: folder for '${wellprefix[$row]}' exists, but not its final .bam alignments."
          echo "because overwrite_partial=true, deleting the directory and re-mapping."
          rm -rf ${dir_well[$row]}
      fi

    mkdir ${dir_well[$row]}
    cd ${dir_well[$row]}
    
    
  
    # run alignments -----------------------------------------------------------
    # in: .fastqs from trimming: four .fastqs,
    #     properly paired ($fastq_r2p, $fastq_r1p) and
    #     trimming singletons ($fastq_r1singletrim, $fastq_r2singletrim)
    # out: - paired-end, single-end .bam alignments out (${bam_pe}, ${bam_se1}, ${bam_se2})
    #      - key log files (e.g., mapping rate) 
    # --------------------------------------------------------------------------

    # (i) paired-end mapping [<1-3 min] ----------------------------------------
    # assumptions: pairs that map ambiguously in paired-end mode should be discarded
    STAR ${star_params} \
        --outFileNamePrefix PE. \
        --readFilesIn ${dir_proj}/${fastq_r1p[$row]} ${dir_proj}/${fastq_r2p[$row]} \
        --outReadsUnmapped Fastx

    # .fq --> .fq.gz for future storage/help match STAR's expected input type [<1-2 min]
    bgzip ${fastq_pe_unmap1}
    bgzip ${fastq_pe_unmap2}



    # (ii.) single-end, R1 [<1-3 min] ------------------------------------------
    # includes Read 1 singletons from trimming and STAR mapping in (i)
    STAR ${star_params} \
        --outFileNamePrefix SE1. \
        --readFilesIn ${dir_proj}/${fastq_r1singletrim[$row]},${fastq_pe_unmap1}.gz



    # (iii.) single-end, R2 [<1-3 min] -----------------------------------------
    # includes Read 2 singletons from trimming and STAR mapping in (i)
    STAR ${star_params} \
        --outFileNamePrefix SE2. \
        --readFilesIn ${dir_proj}/${fastq_r2singletrim[$row]},${fastq_pe_unmap2}.gz



    # (iv.) optional clean-up (comment out as desired)
    # *.Log.final.out contains mapping rate; other *.out
    # have STAR internals that can be discarded

    rm -rf *_STARtmp
    rm -rf *SJ.out.tab
    rm ${fastq_pe_unmap1} ${fastq_pe_unmap2}
    
  
  fi
done



# unload genome from mem at end ------------------------------------------------

STAR --genomeDir ${ref_starfolder} --genomeLoad Remove





echo -e "\n\n'A05a_star_mapping' completed.\n\n"


echo "Job $JOB_ID.$SGE_TASK_ID ended on:   " `hostname -s`
echo "Job $JOB_ID.$SGE_TASK_ID ended on:   " `date `
echo " "
